(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~bot~cashier-a~99500f8d"],{

/***/ "../../components/lib/dropdown.css":
/*!************************************************************************************!*\
  !*** /Users/oskar/Dev/oskar-binary/deriv-app/packages/components/lib/dropdown.css ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vY29tcG9uZW50cy9saWIvZHJvcGRvd24uY3NzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy9Vc2Vycy9vc2thci9EZXYvb3NrYXItYmluYXJ5L2Rlcml2LWFwcC9wYWNrYWdlcy9jb21wb25lbnRzL2xpYi9kcm9wZG93bi5jc3M/MjA2NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../components/lib/dropdown.css\n");

/***/ }),

/***/ "../../components/lib/dropdown.js":
/*!***********************************************************************************!*\
  !*** /Users/oskar/Dev/oskar-binary/deriv-app/packages/components/lib/dropdown.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,g){ true?module.exports=g(__webpack_require__(/*! prop-types */ \"../../components/node_modules/prop-types/index.js\"),__webpack_require__(/*! react */ \"../node_modules/react/index.js\"),__webpack_require__(/*! classnames */ \"../../components/node_modules/classnames/index.js\"),__webpack_require__(/*! react-transition-group */ \"../../components/node_modules/react-transition-group/esm/index.js\"),__webpack_require__(/*! tt-react-custom-scrollbars */ \"../../components/node_modules/tt-react-custom-scrollbars/lib/index.js\"),__webpack_require__(/*! react-tiny-popover */ \"../../components/node_modules/react-tiny-popover/dist/Popover.js\")):undefined}(window,function(__WEBPACK_EXTERNAL_MODULE__0__,__WEBPACK_EXTERNAL_MODULE__1__,__WEBPACK_EXTERNAL_MODULE__2__,__WEBPACK_EXTERNAL_MODULE__5__,__WEBPACK_EXTERNAL_MODULE__12__,__WEBPACK_EXTERNAL_MODULE__17__){return function(e){var g={};function I(t){if(g[t])return g[t].exports;var n=g[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,I),n.l=!0,n.exports}return I.m=e,I.c=g,I.d=function(e,g,t){I.o(e,g)||Object.defineProperty(e,g,{enumerable:!0,get:t})},I.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},I.t=function(e,g){if(1&g&&(e=I(e)),8&g)return e;if(4&g&&\"object\"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(I.r(t),Object.defineProperty(t,\"default\",{enumerable:!0,value:e}),2&g&&\"string\"!=typeof e)for(var n in e)I.d(t,n,function(g){return e[g]}.bind(null,n));return t},I.n=function(e){var g=e&&e.__esModule?function(){return e.default}:function(){return e};return I.d(g,\"a\",g),g},I.o=function(e,g){return Object.prototype.hasOwnProperty.call(e,g)},I.p=\"\",I(I.s=68)}({0:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__0__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJwcm9wLXR5cGVzXCI/MzgzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzBfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///0\\n\")},1:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__1__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJyZWFjdFwiPzU4OGUiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///1\\n\")},12:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__12__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50L2V4dGVybmFsIFwidHQtcmVhY3QtY3VzdG9tLXNjcm9sbGJhcnNcIj8xMTY3Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMTJfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///12\\n\")},15:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n\\n// EXTERNAL MODULE: ./src/components/themed-scrollbars/themed-scrollbars.scss\\nvar themed_scrollbars = __webpack_require__(19);\\n\\n// EXTERNAL MODULE: external \"react\"\\nvar external_react_ = __webpack_require__(1);\\nvar external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);\\n\\n// EXTERNAL MODULE: external \"tt-react-custom-scrollbars\"\\nvar external_tt_react_custom_scrollbars_ = __webpack_require__(12);\\n\\n// CONCATENATED MODULE: ./src/components/themed-scrollbars/themed-scrollbars.jsx\\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn\\'t been initialised - super() hasn\\'t been called\"); } return self; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\n\\n\\n\\nvar themed_scrollbars_ThemedScrollbars =\\n/*#__PURE__*/\\nfunction (_React$Component) {\\n  _inherits(ThemedScrollbars, _React$Component);\\n\\n  function ThemedScrollbars() {\\n    _classCallCheck(this, ThemedScrollbars);\\n\\n    return _possibleConstructorReturn(this, _getPrototypeOf(ThemedScrollbars).apply(this, arguments));\\n  }\\n\\n  _createClass(ThemedScrollbars, [{\\n    key: \"render\",\\n    value: function render() {\\n      return external_react_default.a.createElement(external_tt_react_custom_scrollbars_[\"Scrollbars\"], _extends({\\n        ref: this.props.list_ref,\\n        renderTrackHorizontal: function renderTrackHorizontal(props) {\\n          return external_react_default.a.createElement(\"div\", _extends({}, props, {\\n            className: \"dc-themed-scrollbars__track--horizontal\"\\n          }));\\n        },\\n        renderTrackVertical: function renderTrackVertical(props) {\\n          return external_react_default.a.createElement(\"div\", _extends({}, props, {\\n            className: \"dc-themed-scrollbars__track--vertical\"\\n          }));\\n        },\\n        renderThumbHorizontal: function renderThumbHorizontal(props) {\\n          return external_react_default.a.createElement(\"div\", _extends({}, props, {\\n            className: \"dc-themed-scrollbars__thumb--horizontal\"\\n          }));\\n        },\\n        renderThumbVertical: function renderThumbVertical(props) {\\n          return external_react_default.a.createElement(\"div\", _extends({}, props, {\\n            className: \"dc-themed-scrollbars__thumb--vertical\"\\n          }));\\n        }\\n      }, this.props), this.props.children);\\n    }\\n  }]);\\n\\n  return ThemedScrollbars;\\n}(external_react_default.a.Component);\\n\\n/* harmony default export */ var themed_scrollbars_themed_scrollbars = (themed_scrollbars_ThemedScrollbars);\\n// CONCATENATED MODULE: ./src/components/themed-scrollbars/index.js\\n/* concated harmony reexport default */__webpack_require__.d(__webpack_exports__, \"default\", function() { return themed_scrollbars_themed_scrollbars; });\\n\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvdGhlbWVkLXNjcm9sbGJhcnMvdGhlbWVkLXNjcm9sbGJhcnMuanN4PzQxMjEiLCJ3ZWJwYWNrOi8vQGRlcml2L2NvbXBvbmVudC8uL3NyYy9jb21wb25lbnRzL3RoZW1lZC1zY3JvbGxiYXJzL2luZGV4LmpzPzc1MzQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFNjcm9sbGJhcnMgfSBmcm9tICd0dC1yZWFjdC1jdXN0b20tc2Nyb2xsYmFycyc7XG5cbmNsYXNzIFRoZW1lZFNjcm9sbGJhcnMgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxTY3JvbGxiYXJzXG4gICAgICAgICAgICAgICAgcmVmPXt0aGlzLnByb3BzLmxpc3RfcmVmfVxuICAgICAgICAgICAgICAgIHJlbmRlclRyYWNrSG9yaXpvbnRhbD17cHJvcHMgPT4gPGRpdiB7Li4ucHJvcHN9IGNsYXNzTmFtZT0nZGMtdGhlbWVkLXNjcm9sbGJhcnNfX3RyYWNrLS1ob3Jpem9udGFsJyAvPn1cbiAgICAgICAgICAgICAgICByZW5kZXJUcmFja1ZlcnRpY2FsPXtwcm9wcyA9PiA8ZGl2IHsuLi5wcm9wc30gY2xhc3NOYW1lPSdkYy10aGVtZWQtc2Nyb2xsYmFyc19fdHJhY2stLXZlcnRpY2FsJyAvPn1cbiAgICAgICAgICAgICAgICByZW5kZXJUaHVtYkhvcml6b250YWw9e3Byb3BzID0+IDxkaXYgey4uLnByb3BzfSBjbGFzc05hbWU9J2RjLXRoZW1lZC1zY3JvbGxiYXJzX190aHVtYi0taG9yaXpvbnRhbCcgLz59XG4gICAgICAgICAgICAgICAgcmVuZGVyVGh1bWJWZXJ0aWNhbD17cHJvcHMgPT4gPGRpdiB7Li4ucHJvcHN9IGNsYXNzTmFtZT0nZGMtdGhlbWVkLXNjcm9sbGJhcnNfX3RodW1iLS12ZXJ0aWNhbCcgLz59XG4gICAgICAgICAgICAgICAgey4uLnRoaXMucHJvcHN9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgICAgICAgICA8L1Njcm9sbGJhcnM+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBUaGVtZWRTY3JvbGxiYXJzO1xuIiwiaW1wb3J0ICcuL3RoZW1lZC1zY3JvbGxiYXJzLnNjc3MnO1xuXG5leHBvcnQgZGVmYXVsdCBmcm9tICcuL3RoZW1lZC1zY3JvbGxiYXJzLmpzeCc7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7O0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUxBO0FBV0E7Ozs7QUFkQTtBQUNBO0FBZ0JBOztBQ3BCQTtBQUFBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///15\\n')},17:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__17__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50L2V4dGVybmFsIFwicmVhY3QtdGlueS1wb3BvdmVyXCI/NzQxMSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzE3X187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///17\\n\")},19:function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvdGhlbWVkLXNjcm9sbGJhcnMvdGhlbWVkLXNjcm9sbGJhcnMuc2Nzcz8zNjJjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE1ODA4MDcyNTg5NTVcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtaG90LWxvYWRlci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcImZpbGVNYXBcIjpcIntmaWxlTmFtZX1cIn0pO1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGNzc1JlbG9hZCk7XG4gICAgICBtb2R1bGUuaG90LmFjY2VwdCh1bmRlZmluZWQsIGNzc1JlbG9hZCk7O1xuICAgIH1cbiAgIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGdDQUtBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///19\\n\")},2:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__2__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJjbGFzc25hbWVzXCI/YWFhYiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzJfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///2\\n\")},25:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n\\n// EXTERNAL MODULE: external \"classnames\"\\nvar external_classnames_ = __webpack_require__(2);\\nvar external_classnames_default = /*#__PURE__*/__webpack_require__.n(external_classnames_);\\n\\n// EXTERNAL MODULE: external \"prop-types\"\\nvar external_prop_types_ = __webpack_require__(0);\\nvar external_prop_types_default = /*#__PURE__*/__webpack_require__.n(external_prop_types_);\\n\\n// EXTERNAL MODULE: external \"react\"\\nvar external_react_ = __webpack_require__(1);\\nvar external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);\\n\\n// EXTERNAL MODULE: external \"react-tiny-popover\"\\nvar external_react_tiny_popover_ = __webpack_require__(17);\\nvar external_react_tiny_popover_default = /*#__PURE__*/__webpack_require__.n(external_react_tiny_popover_);\\n\\n// EXTERNAL MODULE: ./src/components/icon/index.js + 1 modules\\nvar components_icon = __webpack_require__(3);\\n\\n// CONCATENATED MODULE: ./src/components/popover/popover.jsx\\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn\\'t been initialised - super() hasn\\'t been called\"); } return self; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\n\\n\\n\\n\\n\\n\\nvar popover_Popover =\\n/*#__PURE__*/\\nfunction (_React$PureComponent) {\\n  _inherits(Popover, _React$PureComponent);\\n\\n  function Popover(props) {\\n    var _this;\\n\\n    _classCallCheck(this, Popover);\\n\\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Popover).call(this, props));\\n\\n    _this.toggleOpen = function () {\\n      return _this.setState({\\n        is_open: Boolean(_this.props.message)\\n      });\\n    };\\n\\n    _this.toggleClose = function () {\\n      return _this.setState({\\n        is_open: false\\n      });\\n    };\\n\\n    _this.state = {\\n      is_open: false\\n    };\\n    return _this;\\n  }\\n\\n  _createClass(Popover, [{\\n    key: \"componentDidMount\",\\n    value: function componentDidMount() {\\n      this.setState({\\n        is_open: this.props.has_error\\n      });\\n    }\\n  }, {\\n    key: \"render\",\\n    value: function render() {\\n      var _this$props = this.props,\\n          alignment = _this$props.alignment,\\n          children = _this$props.children,\\n          className = _this$props.className,\\n          classNameBubble = _this$props.classNameBubble,\\n          classNameTarget = _this$props.classNameTarget,\\n          classNameTargetIcon = _this$props.classNameTargetIcon,\\n          counter = _this$props.counter,\\n          disable_message_icon = _this$props.disable_message_icon,\\n          disable_target_icon = _this$props.disable_target_icon,\\n          has_error = _this$props.has_error,\\n          icon = _this$props.icon,\\n          id = _this$props.id,\\n          is_open = _this$props.is_open,\\n          margin = _this$props.margin,\\n          message = _this$props.message,\\n          zIndex = _this$props.zIndex;\\n      var has_external_open_state = is_open !== undefined;\\n      var icon_class_name = external_classnames_default()(classNameTargetIcon, icon);\\n      return external_react_default.a.createElement(external_react_tiny_popover_default.a, {\\n        isOpen: has_external_open_state ? is_open : this.state.is_open,\\n        position: alignment,\\n        transitionDuration: 0.25,\\n        padding: margin + 8,\\n        containerStyle: {\\n          zIndex: zIndex || 1\\n        },\\n        content: function content(_ref) {\\n          var position = _ref.position,\\n              targetRect = _ref.targetRect,\\n              popoverRect = _ref.popoverRect;\\n          return external_react_default.a.createElement(external_react_tiny_popover_[\"ArrowContainer\"], {\\n            position: position,\\n            targetRect: targetRect,\\n            popoverRect: popoverRect,\\n            arrowColor: has_error ? \\'var(--status-danger)\\' : \\'var(--general-active)\\',\\n            arrowSize: 5\\n          }, external_react_default.a.createElement(\"div\", {\\n            id: id,\\n            className: external_classnames_default()(classNameBubble, \\'dc-popover__bubble\\', {\\n              \\'dc-popover__bubble--error\\': has_error\\n            })\\n          }, !disable_message_icon && icon === \\'info\\' && external_react_default.a.createElement(\"i\", {\\n            className: \"dc-popover__bubble__icon\"\\n          }, external_react_default.a.createElement(components_icon[\"default\"], {\\n            icon: \"IcInfoBlue\"\\n          })), external_react_default.a.createElement(\"span\", {\\n            className: external_classnames_default()(\\'dc-popover__bubble__text\\', {\\n              \\'dc-popover__bubble__text--error\\': has_error\\n            })\\n          }, message)));\\n        }\\n      }, external_react_default.a.createElement(\"div\", {\\n        className: external_classnames_default()(\\'dc-popover\\', className),\\n        id: id,\\n        onMouseEnter: has_external_open_state ? undefined : this.toggleOpen,\\n        onMouseLeave: has_external_open_state ? undefined : this.toggleClose\\n      }, external_react_default.a.createElement(\"div\", {\\n        className: external_classnames_default()(classNameTarget, \\'dc-popover__target\\')\\n      }, !disable_target_icon && external_react_default.a.createElement(\"i\", {\\n        className: message ? \\'dc-popover__target__icon\\' : \\'dc-popover__target__icon--disabled\\'\\n      }, icon === \\'info\\' && external_react_default.a.createElement(components_icon[\"default\"], {\\n        icon: \"IcInfoOutline\",\\n        className: icon_class_name\\n      }), icon === \\'question\\' && external_react_default.a.createElement(components_icon[\"default\"], {\\n        icon: \"IcUnknown\",\\n        className: icon_class_name\\n      }), icon === \\'dot\\' && external_react_default.a.createElement(components_icon[\"default\"], {\\n        icon: \"IcCircle\",\\n        className: icon_class_name,\\n        size: 4\\n      }), icon === \\'counter\\' && external_react_default.a.createElement(\"span\", {\\n        className: icon_class_name\\n      }, counter)), children)));\\n    }\\n  }]);\\n\\n  return Popover;\\n}(external_react_default.a.PureComponent);\\n\\npopover_Popover.defaultProps = {\\n  portal_container: \\'deriv_app\\',\\n  margin: 0\\n};\\npopover_Popover.propTypes = {\\n  alignment: external_prop_types_default.a.string,\\n  children: external_prop_types_default.a.node,\\n  className: external_prop_types_default.a.string,\\n  classNameBubble: external_prop_types_default.a.string,\\n  classNameTarget: external_prop_types_default.a.string,\\n  classNameTargetIcon: external_prop_types_default.a.string,\\n  counter: external_prop_types_default.a.number,\\n  disable_message_icon: external_prop_types_default.a.bool,\\n  disable_target_icon: external_prop_types_default.a.bool,\\n  has_error: external_prop_types_default.a.bool,\\n  icon: external_prop_types_default.a.oneOf([\\'info\\', \\'question\\', \\'dot\\', \\'counter\\']),\\n  id: external_prop_types_default.a.string,\\n  is_open: external_prop_types_default.a.bool,\\n  margin: external_prop_types_default.a.number,\\n  message: external_prop_types_default.a.oneOfType([external_prop_types_default.a.string, external_prop_types_default.a.object]),\\n  portal_container: external_prop_types_default.a.string,\\n  zIndex: external_prop_types_default.a.number\\n};\\n/* harmony default export */ var popover = (popover_Popover);\\n// EXTERNAL MODULE: ./src/components/popover/popover.scss\\nvar popover_popover = __webpack_require__(27);\\n\\n// CONCATENATED MODULE: ./src/components/popover/index.js\\n\\n\\n/* harmony default export */ var components_popover = __webpack_exports__[\"default\"] = (popover);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///25\\n')},27:function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvcG9wb3Zlci9wb3BvdmVyLnNjc3M/ZWVkNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbiAgICBpZihtb2R1bGUuaG90KSB7XG4gICAgICAvLyAxNTgwODA3MjU4NTk0XG4gICAgICB2YXIgY3NzUmVsb2FkID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWhvdC1sb2FkZXIvaG90TW9kdWxlUmVwbGFjZW1lbnQuanNcIikobW9kdWxlLmlkLCB7XCJmaWxlTWFwXCI6XCJ7ZmlsZU5hbWV9XCJ9KTtcbiAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShjc3NSZWxvYWQpO1xuICAgICAgbW9kdWxlLmhvdC5hY2NlcHQodW5kZWZpbmVkLCBjc3NSZWxvYWQpOztcbiAgICB9XG4gICJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxnQ0FLQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///27\\n\")},3:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval(\"__webpack_require__.r(__webpack_exports__);\\n\\n// EXTERNAL MODULE: external \\\"classnames\\\"\\nvar external_classnames_ = __webpack_require__(2);\\nvar external_classnames_default = /*#__PURE__*/__webpack_require__.n(external_classnames_);\\n\\n// EXTERNAL MODULE: external \\\"prop-types\\\"\\nvar external_prop_types_ = __webpack_require__(0);\\nvar external_prop_types_default = /*#__PURE__*/__webpack_require__.n(external_prop_types_);\\n\\n// EXTERNAL MODULE: external \\\"react\\\"\\nvar external_react_ = __webpack_require__(1);\\nvar external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);\\n\\n// CONCATENATED MODULE: ./src/components/icon/icon.jsx\\n\\n\\n // TODO: [move-to-shared]\\n\\nvar getUrlBase = function getUrlBase() {\\n  var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\\n  var l = window.location;\\n  if (!/^\\\\/(br_)/.test(l.pathname)) return path;\\n  return \\\"/\\\".concat(l.pathname.split('/')[1]).concat(/^\\\\//.test(path) ? path : \\\"/\\\".concat(path));\\n}; // TODO: [move-to-shared]\\n\\n\\nvar getKebabCase = function getKebabCase(str) {\\n  if (!str) return str;\\n  return str.replace(/([a-z0-9])([A-Z])/g, '$1-$2') // get all lowercase letters that are near to uppercase ones\\n  .replace(/[\\\\s]+/g, '-') // replace all spaces and low dash\\n  .toLowerCase();\\n};\\n\\nvar icon_Icon = function Icon(_ref) {\\n  var className = _ref.className,\\n      color = _ref.color,\\n      custom_color = _ref.custom_color,\\n      height = _ref.height,\\n      icon = _ref.icon,\\n      id = _ref.id,\\n      onClick = _ref.onClick,\\n      onMouseEnter = _ref.onMouseEnter,\\n      onMouseLeave = _ref.onMouseLeave,\\n      _ref$size = _ref.size,\\n      size = _ref$size === void 0 ? 16 : _ref$size,\\n      width = _ref.width;\\n  if (!icon) return null;\\n  var filename = 'common';\\n  var filenames = /^Ic(Currency|Tradetype|Mt5|Flag|Underlying)/g.exec(icon);\\n\\n  if (filenames) {\\n    filename = getKebabCase(filenames[1]);\\n  }\\n\\n  var sprite_id = icon.startsWith('IcUnderlying') ? \\\"ic-underlying-\\\".concat(icon.split('IcUnderlying')[1].toUpperCase()) : getKebabCase(icon);\\n  return external_react_default.a.createElement(\\\"svg\\\", {\\n    xmlns: \\\"http://www.w3.org/2000/svg\\\",\\n    xmlnsXlink: \\\"http://www.w3.org/1999/xlink\\\",\\n    className: external_classnames_default()('dc-icon', className, {\\n      'dc-icon--active': color === 'active',\\n      'dc-icon--disabled': color === 'disabled',\\n      'dc-icon--green': color === 'green' || icon === 'IcProfit',\\n      'dc-icon--red': color === 'red' || icon === 'IcLoss',\\n      'dc-icon--secondary': color === 'secondary',\\n      'dc-icon--brand': color === 'brand'\\n    }),\\n    height: height || size,\\n    id: id,\\n    width: width || size,\\n    onClick: onClick,\\n    onMouseEnter: onMouseEnter,\\n    onMouseLeave: onMouseLeave,\\n    style: custom_color ? {\\n      '--fill-color1': custom_color\\n    } : undefined\\n  }, external_react_default.a.createElement(\\\"use\\\", {\\n    xlinkHref: \\\"\\\".concat(getUrlBase(\\\"/public/images/sprite/\\\".concat(filename, \\\".svg\\\")), \\\"#\\\").concat(sprite_id)\\n  }));\\n};\\n\\nicon_Icon.propTypes = {\\n  className: external_prop_types_default.a.oneOfType([external_prop_types_default.a.object, external_prop_types_default.a.string]),\\n  color: external_prop_types_default.a.oneOfType([external_prop_types_default.a.bool, external_prop_types_default.a.string]),\\n  custom_color: external_prop_types_default.a.string,\\n  height: external_prop_types_default.a.oneOfType([external_prop_types_default.a.number, external_prop_types_default.a.string]),\\n  icon: external_prop_types_default.a.string,\\n  onClick: external_prop_types_default.a.func,\\n  onMouseEnter: external_prop_types_default.a.func,\\n  onMouseLeave: external_prop_types_default.a.func,\\n  size: external_prop_types_default.a.oneOfType([external_prop_types_default.a.number, external_prop_types_default.a.string]),\\n  width: external_prop_types_default.a.oneOfType([external_prop_types_default.a.number, external_prop_types_default.a.string])\\n};\\n/* harmony default export */ var icon_icon = (icon_Icon);\\n// EXTERNAL MODULE: ./src/components/icon/icon.scss\\nvar components_icon_icon = __webpack_require__(4);\\n\\n// CONCATENATED MODULE: ./src/components/icon/index.js\\n\\n\\n/* harmony default export */ var components_icon = __webpack_exports__[\\\"default\\\"] = (icon_icon);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvLi9zcmMvY29tcG9uZW50cy9pY29uL2ljb24uanN4PzJhYTMiLCJ3ZWJwYWNrOi8vQGRlcml2L2NvbXBvbmVudC8uL3NyYy9jb21wb25lbnRzL2ljb24vaW5kZXguanM/YWU2MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG4vLyBUT0RPOiBbbW92ZS10by1zaGFyZWRdXG5jb25zdCBnZXRVcmxCYXNlID0gKHBhdGggPSAnJykgPT4ge1xuICAgIGNvbnN0IGwgPSB3aW5kb3cubG9jYXRpb247XG5cbiAgICBpZiAoIS9eXFwvKGJyXykvLnRlc3QobC5wYXRobmFtZSkpIHJldHVybiBwYXRoO1xuXG4gICAgcmV0dXJuIGAvJHtsLnBhdGhuYW1lLnNwbGl0KCcvJylbMV19JHsvXlxcLy8udGVzdChwYXRoKSA/IHBhdGggOiBgLyR7cGF0aH1gfWA7XG59O1xuXG4vLyBUT0RPOiBbbW92ZS10by1zaGFyZWRdXG5jb25zdCBnZXRLZWJhYkNhc2UgPSBzdHIgPT4ge1xuICAgIGlmICghc3RyKSByZXR1cm4gc3RyO1xuICAgIHJldHVybiBzdHJcbiAgICAgICAgLnJlcGxhY2UoLyhbYS16MC05XSkoW0EtWl0pL2csICckMS0kMicpIC8vIGdldCBhbGwgbG93ZXJjYXNlIGxldHRlcnMgdGhhdCBhcmUgbmVhciB0byB1cHBlcmNhc2Ugb25lc1xuICAgICAgICAucmVwbGFjZSgvW1xcc10rL2csICctJykgLy8gcmVwbGFjZSBhbGwgc3BhY2VzIGFuZCBsb3cgZGFzaFxuICAgICAgICAudG9Mb3dlckNhc2UoKTtcbn07XG5cbmNvbnN0IEljb24gPSAoe1xuICAgIGNsYXNzTmFtZSxcbiAgICBjb2xvcixcbiAgICBjdXN0b21fY29sb3IsXG4gICAgaGVpZ2h0LFxuICAgIGljb24sXG4gICAgaWQsXG4gICAgb25DbGljayxcbiAgICBvbk1vdXNlRW50ZXIsXG4gICAgb25Nb3VzZUxlYXZlLFxuICAgIHNpemUgPSAxNixcbiAgICB3aWR0aCxcbn0pID0+IHtcbiAgICBpZiAoIWljb24pIHJldHVybiBudWxsO1xuXG4gICAgbGV0IGZpbGVuYW1lID0gJ2NvbW1vbic7XG4gICAgY29uc3QgZmlsZW5hbWVzID0gL15JYyhDdXJyZW5jeXxUcmFkZXR5cGV8TXQ1fEZsYWd8VW5kZXJseWluZykvZy5leGVjKGljb24pO1xuICAgIGlmIChmaWxlbmFtZXMpIHtcbiAgICAgICAgZmlsZW5hbWUgPSBnZXRLZWJhYkNhc2UoZmlsZW5hbWVzWzFdKTtcbiAgICB9XG5cbiAgICBjb25zdCBzcHJpdGVfaWQgPSBpY29uLnN0YXJ0c1dpdGgoJ0ljVW5kZXJseWluZycpXG4gICAgICAgID8gYGljLXVuZGVybHlpbmctJHtpY29uLnNwbGl0KCdJY1VuZGVybHlpbmcnKVsxXS50b1VwcGVyQ2FzZSgpfWBcbiAgICAgICAgOiBnZXRLZWJhYkNhc2UoaWNvbik7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8c3ZnXG4gICAgICAgICAgICB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnXG4gICAgICAgICAgICB4bWxuc1hsaW5rPSdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJ1xuICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKCdkYy1pY29uJywgY2xhc3NOYW1lLCB7XG4gICAgICAgICAgICAgICAgJ2RjLWljb24tLWFjdGl2ZSc6IGNvbG9yID09PSAnYWN0aXZlJyxcbiAgICAgICAgICAgICAgICAnZGMtaWNvbi0tZGlzYWJsZWQnOiBjb2xvciA9PT0gJ2Rpc2FibGVkJyxcbiAgICAgICAgICAgICAgICAnZGMtaWNvbi0tZ3JlZW4nOiBjb2xvciA9PT0gJ2dyZWVuJyB8fCBpY29uID09PSAnSWNQcm9maXQnLFxuICAgICAgICAgICAgICAgICdkYy1pY29uLS1yZWQnOiBjb2xvciA9PT0gJ3JlZCcgfHwgaWNvbiA9PT0gJ0ljTG9zcycsXG4gICAgICAgICAgICAgICAgJ2RjLWljb24tLXNlY29uZGFyeSc6IGNvbG9yID09PSAnc2Vjb25kYXJ5JyxcbiAgICAgICAgICAgICAgICAnZGMtaWNvbi0tYnJhbmQnOiBjb2xvciA9PT0gJ2JyYW5kJyxcbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgaGVpZ2h0PXtoZWlnaHQgfHwgc2l6ZX1cbiAgICAgICAgICAgIGlkPXtpZH1cbiAgICAgICAgICAgIHdpZHRoPXt3aWR0aCB8fCBzaXplfVxuICAgICAgICAgICAgb25DbGljaz17b25DbGlja31cbiAgICAgICAgICAgIG9uTW91c2VFbnRlcj17b25Nb3VzZUVudGVyfVxuICAgICAgICAgICAgb25Nb3VzZUxlYXZlPXtvbk1vdXNlTGVhdmV9XG4gICAgICAgICAgICBzdHlsZT17XG4gICAgICAgICAgICAgICAgY3VzdG9tX2NvbG9yXG4gICAgICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnLS1maWxsLWNvbG9yMSc6IGN1c3RvbV9jb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkXG4gICAgICAgICAgICB9XG4gICAgICAgID5cbiAgICAgICAgICAgIDx1c2UgeGxpbmtIcmVmPXtgJHtnZXRVcmxCYXNlKGAvcHVibGljL2ltYWdlcy9zcHJpdGUvJHtmaWxlbmFtZX0uc3ZnYCl9IyR7c3ByaXRlX2lkfWB9IC8+XG4gICAgICAgIDwvc3ZnPlxuICAgICk7XG59O1xuXG5JY29uLnByb3BUeXBlcyA9IHtcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmJvb2wsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgICBjdXN0b21fY29sb3I6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgaGVpZ2h0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gICAgaWNvbjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvbk1vdXNlRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uTW91c2VMZWF2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2l6ZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAgIHdpZHRoOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG59O1xuXG5leHBvcnQgZGVmYXVsdCBJY29uO1xuIiwiaW1wb3J0IEljb24gZnJvbSAnLi9pY29uLmpzeCc7XG5pbXBvcnQgJy4vaWNvbi5zY3NzJztcblxuZXhwb3J0IGRlZmF1bHQgSWNvbjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUlBO0FBQ0E7QUFDQTtBQVlBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTkE7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBREE7QUFuQkE7QUF5QkE7QUFBQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBVkE7QUFhQTs7Ozs7QUMzRkE7QUFDQTtBQUVBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///3\\n\")},4:function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvLi9zcmMvY29tcG9uZW50cy9pY29uL2ljb24uc2Nzcz83YjFhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE1ODA4MDcyNTgxNjBcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtaG90LWxvYWRlci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcImZpbGVNYXBcIjpcIntmaWxlTmFtZX1cIn0pO1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGNzc1JlbG9hZCk7XG4gICAgICBtb2R1bGUuaG90LmFjY2VwdCh1bmRlZmluZWQsIGNzc1JlbG9hZCk7O1xuICAgIH1cbiAgIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGdDQUtBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///4\\n\")},42:function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvZHJvcGRvd24vZHJvcGRvd24uc2Nzcz8wZjUwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE1ODA4MDcyNTc4ODRcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtaG90LWxvYWRlci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcImZpbGVNYXBcIjpcIntmaWxlTmFtZX1cIn0pO1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGNzc1JlbG9hZCk7XG4gICAgICBtb2R1bGUuaG90LmFjY2VwdCh1bmRlZmluZWQsIGNzc1JlbG9hZCk7O1xuICAgIH1cbiAgIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGdDQUtBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///42\\n\")},43:function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY29tcG9uZW50Ly4vc3JjL2NvbXBvbmVudHMvZHJvcGRvd24vbGlzdC5zY3NzP2ZhZjYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgLy8gMTU4MDgwNzI1Nzk1MVxuICAgICAgdmFyIGNzc1JlbG9hZCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1ob3QtbG9hZGVyL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzXCIpKG1vZHVsZS5pZCwge1wiZmlsZU1hcFwiOlwie2ZpbGVOYW1lfVwifSk7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoY3NzUmVsb2FkKTtcbiAgICAgIG1vZHVsZS5ob3QuYWNjZXB0KHVuZGVmaW5lZCwgY3NzUmVsb2FkKTs7XG4gICAgfVxuICAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsZ0NBS0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///43\\n\")},5:function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__5__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jb21wb25lbnQvZXh0ZXJuYWwgXCJyZWFjdC10cmFuc2l0aW9uLWdyb3VwXCI/ZGRlMCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzVfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///5\\n\")},68:function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n\\n// EXTERNAL MODULE: external \"classnames\"\\nvar external_classnames_ = __webpack_require__(2);\\nvar external_classnames_default = /*#__PURE__*/__webpack_require__.n(external_classnames_);\\n\\n// EXTERNAL MODULE: external \"prop-types\"\\nvar external_prop_types_ = __webpack_require__(0);\\nvar external_prop_types_default = /*#__PURE__*/__webpack_require__.n(external_prop_types_);\\n\\n// EXTERNAL MODULE: external \"react\"\\nvar external_react_ = __webpack_require__(1);\\nvar external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);\\n\\n// EXTERNAL MODULE: external \"react-transition-group\"\\nvar external_react_transition_group_ = __webpack_require__(5);\\n\\n// EXTERNAL MODULE: ./src/components/themed-scrollbars/index.js + 1 modules\\nvar themed_scrollbars = __webpack_require__(15);\\n\\n// CONCATENATED MODULE: ./src/components/dropdown/dropdown.js\\n\\nvar getDisplayText = function getDisplayText(list, value) {\\n  var findInArray = function findInArray(arr_list) {\\n    return (arr_list.find(function (item) {\\n      return item.value === value;\\n    }) || {}).text;\\n  };\\n\\n  var text = \\'\\';\\n\\n  if (Array.isArray(list)) {\\n    text = findInArray(list);\\n  } else {\\n    Object.keys(list).some(function (key) {\\n      text = findInArray(list[key]);\\n      return text;\\n    });\\n  }\\n\\n  return text;\\n};\\nvar getItemFromValue = function getItemFromValue(list, value) {\\n  var findInArray = function findInArray(arr_list) {\\n    return arr_list.findIndex(function (item) {\\n      return item.value === value;\\n    });\\n  };\\n\\n  var item = {};\\n\\n  if (Array.isArray(list)) {\\n    item = {\\n      number: findInArray(list),\\n      length: list.length\\n    };\\n  } else {\\n    Object.keys(list).some(function (key) {\\n      item = {\\n        number: findInArray(list[key]),\\n        length: list[key].length\\n      };\\n      return item;\\n    });\\n  }\\n\\n  return item;\\n};\\nvar getValueFromIndex = function getValueFromIndex(list, index) {\\n  var findInArray = function findInArray(arr_list) {\\n    return arr_list[index];\\n  };\\n\\n  var result;\\n\\n  if (Array.isArray(list)) {\\n    result = findInArray(list);\\n  } else {\\n    Object.keys(list).some(function (key) {\\n      result = findInArray(list[key]);\\n      return result.value;\\n    });\\n  }\\n\\n  return result.value;\\n};\\nvar getPrevIndex = function getPrevIndex(index, length) {\\n  var prev_index = index - 1 < 0 ? length - 1 : index - 1;\\n  return prev_index;\\n};\\nvar getNextIndex = function getNextIndex(index, length) {\\n  var next_index = index + 1 === length ? 0 : index + 1;\\n  return next_index;\\n};\\nvar dropdown_listPropType = function listPropType() {\\n  return external_prop_types_default.a.oneOfType([external_prop_types_default.a.arrayOf(external_prop_types_default.a.shape({\\n    disabled: external_prop_types_default.a.bool,\\n    has_tooltip: external_prop_types_default.a.bool,\\n    text: external_prop_types_default.a.string,\\n    tooltip: external_prop_types_default.a.string,\\n    value: external_prop_types_default.a.oneOfType([external_prop_types_default.a.string, external_prop_types_default.a.number])\\n  })), external_prop_types_default.a.object]);\\n};\\n// EXTERNAL MODULE: ./src/components/popover/index.js + 1 modules\\nvar popover = __webpack_require__(25);\\n\\n// CONCATENATED MODULE: ./src/components/dropdown/items.jsx\\n\\n\\n\\n\\n\\nvar items_Items = function Items(_ref) {\\n  var className = _ref.className,\\n      index = _ref.index,\\n      handleSelect = _ref.handleSelect,\\n      has_symbol = _ref.has_symbol,\\n      items = _ref.items,\\n      name = _ref.name,\\n      is_align_text_left = _ref.is_align_text_left,\\n      value = _ref.value;\\n  return items.map(function (item, idx) {\\n    var symbol_type_class_name = item.text && typeof item.text === \\'string\\' ? \"symbols--\".concat(item.text.toLowerCase()) : null;\\n    return external_react_default.a.createElement(\"div\", {\\n      className: external_classnames_default()(\\'dc-list__item\\', {\\n        \\'dc-list__item--highlighted\\': idx === index\\n      }, {\\n        \\'dc-list__item--selected\\': value === item.value\\n      }, {\\n        \\'dc-list__item--disabled\\': item.disabled\\n      }),\\n      name: name,\\n      value: item.value,\\n      onClick: item.disabled ? null : handleSelect.bind(null, item),\\n      key: idx\\n    }, !!has_symbol && item.has_tooltip && external_react_default.a.createElement(popover[\"default\"], {\\n      alignment: \"left\",\\n      message: item.text\\n    }, external_react_default.a.createElement(\"span\", {\\n      className: external_classnames_default()(\\'symbols\\', \\'dc-list__item-symbol\\', symbol_type_class_name)\\n    })), !!has_symbol && !item.has_tooltip && external_react_default.a.createElement(\"span\", {\\n      className: external_classnames_default()(\\'symbols\\', \\'dc-list__item-text\\', symbol_type_class_name)\\n    }), !has_symbol && external_react_default.a.createElement(\"span\", {\\n      className: external_classnames_default()(\\'dc-list__item-text\\', {\\n        \\'dc-list__item-text--left\\': is_align_text_left\\n      }, className)\\n    }, item.text));\\n  });\\n};\\n\\nitems_Items.propTypes = {\\n  className: external_prop_types_default.a.string,\\n  handleSelect: external_prop_types_default.a.func,\\n  has_symbol: external_prop_types_default.a.bool,\\n  name: external_prop_types_default.a.string,\\n  value: external_prop_types_default.a.oneOfType([external_prop_types_default.a.number, external_prop_types_default.a.string])\\n};\\n/* harmony default export */ var dropdown_items = (items_Items);\\n// CONCATENATED MODULE: ./src/components/dropdown/native-select.jsx\\n\\n\\n\\nvar native_select_NativeSelect = function NativeSelect(_ref) {\\n  var name = _ref.name,\\n      list = _ref.list,\\n      value = _ref.value,\\n      onChange = _ref.onChange;\\n  return external_react_default.a.createElement(\"div\", {\\n    className: \"native-select native-select__wrapper\"\\n  }, external_react_default.a.createElement(\"select\", {\\n    className: \"select native-select__select\",\\n    name: name,\\n    value: value,\\n    onChange: onChange\\n  }, Array.isArray(list) ? list.map(function (item, idx) {\\n    return external_react_default.a.createElement(\"option\", {\\n      key: idx,\\n      value: item.value\\n    }, item.text);\\n  }) : Object.keys(list).map(function (key) {\\n    return external_react_default.a.createElement(external_react_default.a.Fragment, {\\n      key: key\\n    }, external_react_default.a.createElement(\"optgroup\", {\\n      label: key\\n    }, list[key].map(function (item, idx) {\\n      return external_react_default.a.createElement(\"option\", {\\n        key: idx,\\n        value: item.value\\n      }, item.text);\\n    })));\\n  })));\\n};\\n\\nnative_select_NativeSelect.propTypes = {\\n  list: external_prop_types_default.a.oneOfType([external_prop_types_default.a.object, external_prop_types_default.a.array]),\\n  name: external_prop_types_default.a.string,\\n  onChange: external_prop_types_default.a.func,\\n  value: external_prop_types_default.a.oneOfType([external_prop_types_default.a.number, external_prop_types_default.a.string])\\n};\\n/* harmony default export */ var native_select = (native_select_NativeSelect);\\n// CONCATENATED MODULE: ./src/components/dropdown/display-text.jsx\\n\\n\\n\\n\\n\\nvar display_text_DisplayText = function DisplayText(_ref) {\\n  var className = _ref.className,\\n      has_symbol = _ref.has_symbol,\\n      list = _ref.list,\\n      is_align_text_left = _ref.is_align_text_left,\\n      placeholder = _ref.placeholder,\\n      name = _ref.name,\\n      value = _ref.value;\\n  var symbol_value_class = value && has_symbol ? \"symbols--\".concat(value.toLowerCase()) : null;\\n  return external_react_default.a.createElement(external_react_default.a.Fragment, null, has_symbol ? external_react_default.a.createElement(\"span\", {\\n    className: external_classnames_default()(\\'symbols dc-dropdown__display-symbol\\', symbol_value_class, className),\\n    name: name,\\n    value: value\\n  }) : external_react_default.a.createElement(\"span\", {\\n    className: external_classnames_default()(\\'dc-dropdown__display-text\\', className),\\n    name: name,\\n    value: value\\n  }, getDisplayText(list, value)), placeholder && external_react_default.a.createElement(\"div\", {\\n    className: external_classnames_default()(\\'dc-dropdown__display-placeholder\\', {\\n      \\'dc-dropdown__display-placeholder--is-title\\': value,\\n      \\'dc-dropdown__display-placeholder--is-left-text\\': is_align_text_left\\n    })\\n  }, external_react_default.a.createElement(\"span\", {\\n    className: \"dc-dropdown__display-placeholder-text\"\\n  }, placeholder)));\\n};\\n\\ndisplay_text_DisplayText.propTypes = {\\n  className: external_prop_types_default.a.string,\\n  has_symbol: external_prop_types_default.a.bool,\\n  is_title: external_prop_types_default.a.bool,\\n  list: dropdown_listPropType(),\\n  name: external_prop_types_default.a.string,\\n  placeholder: external_prop_types_default.a.string,\\n  value: external_prop_types_default.a.oneOfType([external_prop_types_default.a.string, external_prop_types_default.a.number])\\n};\\n/* harmony default export */ var display_text = (display_text_DisplayText);\\n// EXTERNAL MODULE: ./src/components/icon/index.js + 1 modules\\nvar icon = __webpack_require__(3);\\n\\n// CONCATENATED MODULE: ./src/components/dropdown/dropdown.jsx\\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn\\'t been initialised - super() hasn\\'t been called\"); } return self; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nvar dropdown_Dropdown =\\n/*#__PURE__*/\\nfunction (_React$Component) {\\n  _inherits(Dropdown, _React$Component);\\n\\n  function Dropdown() {\\n    var _getPrototypeOf2;\\n\\n    var _this;\\n\\n    _classCallCheck(this, Dropdown);\\n\\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\\n      args[_key] = arguments[_key];\\n    }\\n\\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Dropdown)).call.apply(_getPrototypeOf2, [this].concat(args)));\\n    _this.list_ref = external_react_default.a.createRef();\\n    _this.state = {\\n      curr_index: 0,\\n      is_list_visible: false,\\n      list_height: 0,\\n      list_width: 0\\n    };\\n\\n    _this.handleSelect = function (item) {\\n      if (item.value !== _this.props.value) {\\n        _this.props.onChange({\\n          target: {\\n            name: _this.props.name,\\n            value: item.value\\n          }\\n        });\\n\\n        _this.updateSelected(item.value);\\n      }\\n\\n      _this.handleVisibility();\\n    };\\n\\n    _this.setWrapperRef = function (node) {\\n      return _this.wrapper_ref = node;\\n    };\\n\\n    _this.handleClickOutside = function (event) {\\n      if (_this.wrapper_ref && !_this.wrapper_ref.contains(event.target) && !_this.wrapper_ref.contains(event.path[0]) && // event.path[0] is the node that the event originated from, it does not need to walk the array\\n      _this.state.is_list_visible) {\\n        if (typeof _this.props.handleBlur === \\'function\\') {\\n          _this.props.handleBlur({\\n            target: {\\n              name: _this.props.name\\n            }\\n          });\\n        }\\n\\n        _this.setState({\\n          is_list_visible: false\\n        });\\n      }\\n    };\\n\\n    _this.handleVisibility = function () {\\n      _this.setState(function (state) {\\n        return {\\n          is_list_visible: !state.is_list_visible\\n        };\\n      });\\n    };\\n\\n    _this.handleToggle = function (value) {\\n      if (_this.state.is_list_visible && _this.props.value !== value) {\\n        _this.props.onChange({\\n          target: {\\n            name: _this.props.name,\\n            value: value\\n          }\\n        });\\n      }\\n\\n      _this.handleVisibility();\\n    };\\n\\n    _this.onKeyPressed = function (event) {\\n      if (_this.is_single_option) return;\\n\\n      if (event.keyCode === 9) {\\n        // Tab is pressed\\n        if (_this.state.is_list_visible) {\\n          _this.handleVisibility();\\n        }\\n\\n        return;\\n      }\\n\\n      event.preventDefault();\\n      var index = _this.props.value ? getItemFromValue(_this.props.list, _this.props.value) : 0;\\n      var value = _this.props.value ? getValueFromIndex(_this.props.list, _this.state.curr_index) : null;\\n\\n      switch (event.keyCode) {\\n        case 13: // Enter is pressed\\n\\n        case 32:\\n          // Space is pressed\\n          if (value) _this.handleToggle(value);\\n          break;\\n\\n        case 38:\\n          // Up Arrow is pressed\\n          if (_this.state.is_list_visible) {\\n            var prev_index = getPrevIndex(_this.state.curr_index, index.length);\\n\\n            _this.setState({\\n              curr_index: prev_index\\n            });\\n          }\\n\\n          break;\\n\\n        case 40:\\n          // Down Arrow is pressed\\n          if (_this.state.is_list_visible) {\\n            var next_index = getNextIndex(_this.state.curr_index, index.length);\\n\\n            _this.setState({\\n              curr_index: next_index\\n            });\\n          } else if (!_this.props.is_alignment_left) {\\n            _this.handleVisibility();\\n          }\\n\\n          break;\\n\\n        case 37:\\n          // Left arrow is pressed\\n          if (!_this.state.is_list_visible && _this.props.is_alignment_left) {\\n            _this.handleVisibility();\\n          }\\n\\n          break;\\n\\n        case 39:\\n          // Right Arrow is pressed\\n          if (_this.state.is_list_visible && _this.props.is_alignment_left) {\\n            _this.handleVisibility();\\n          }\\n\\n          break;\\n\\n        default:\\n      } // For char presses, we do a search for the item:\\n\\n\\n      if (event.key.length === 1 && _this.props.list.length) {\\n        var _char = event.key.toLowerCase();\\n\\n        var firstChars = _this.props.list.map(function (x) {\\n          return typeof x === \\'string\\' && x.text[0].toLowerCase();\\n        });\\n\\n        var idx; // Tapping the same character again jumps to the next match:\\n\\n        if (_this.state.curr_index) {\\n          idx = firstChars.indexOf(_char, _this.state.curr_index + 1);\\n        }\\n\\n        if (idx === undefined || idx === -1) {\\n          idx = firstChars.indexOf(_char);\\n        }\\n\\n        if (idx >= 0) {\\n          _this.setState({\\n            curr_index: idx\\n          });\\n        }\\n      }\\n    };\\n\\n    _this.setListDimension = function () {\\n      return _this.setState({\\n        list_width: _this.list_ref.current.offsetWidth,\\n        list_height: _this.list_ref.current.offsetHeight\\n      });\\n    };\\n\\n    return _this;\\n  }\\n\\n  _createClass(Dropdown, [{\\n    key: \"componentDidMount\",\\n    value: function componentDidMount() {\\n      this.updateSelected(this.props.value);\\n      document.addEventListener(\\'mousedown\\', this.handleClickOutside, {\\n        passive: true\\n      });\\n    }\\n  }, {\\n    key: \"componentDidUpdate\",\\n    value: function componentDidUpdate(prevProps) {\\n      if (prevProps.value !== this.props.value) {\\n        this.updateSelected(this.props.value);\\n      }\\n    }\\n  }, {\\n    key: \"componentWillUnmount\",\\n    value: function componentWillUnmount() {\\n      document.removeEventListener(\\'mousedown\\', this.handleClickOutside);\\n    }\\n  }, {\\n    key: \"updateSelected\",\\n    value: function updateSelected(value) {\\n      this.setState({\\n        curr_index: getItemFromValue(this.props.list, value).number\\n      });\\n    }\\n  }, {\\n    key: \"render\",\\n    value: function render() {\\n      var _this2 = this;\\n\\n      if (this.props.is_nativepicker) {\\n        return external_react_default.a.createElement(native_select, {\\n          name: this.props.name,\\n          value: this.props.value,\\n          list: this.props.list,\\n          onChange: this.props.onChange\\n        });\\n      }\\n\\n      var getDropDownAlignment = function getDropDownAlignment() {\\n        if (_this2.props.is_alignment_left) return _this2.computed_offset_left;else if (_this2.props.is_alignment_top) return _this2.computed_offset_top;\\n        return null;\\n      };\\n\\n      return external_react_default.a.createElement(external_react_default.a.Fragment, null, external_react_default.a.createElement(\"input\", {\\n        className: \"dc-dropdown__inner\",\\n        autoComplete: \"off\",\\n        name: this.props.name,\\n        readOnly: \"readonly\",\\n        type: \"hidden\",\\n        value: this.props.value || 0\\n      }), external_react_default.a.createElement(\"div\", {\\n        ref: this.setWrapperRef,\\n        className: this.container_class_name\\n      }, this.props.label && external_react_default.a.createElement(\"span\", {\\n        className: external_classnames_default()(\\'dc-dropdown__label\\', {\\n          \\'dc-dropdown__label--clicked\\': this.state.is_list_visible\\n        })\\n      }, this.props.label), external_react_default.a.createElement(\"div\", {\\n        className: this.dropdown_display_class_name,\\n        tabIndex: this.is_single_option ? \\'-1\\' : \\'0\\',\\n        onClick: this.handleVisibility,\\n        onKeyDown: this.onKeyPressed\\n      }, external_react_default.a.createElement(display_text, {\\n        has_symbol: this.props.has_symbol,\\n        name: this.props.name,\\n        is_title: this.state.is_list_visible,\\n        placeholder: this.props.placeholder,\\n        value: this.props.value || 0,\\n        list: this.props.list,\\n        is_align_text_left: this.props.is_align_text_left\\n      })), !this.is_single_option && external_react_default.a.createElement(icon[\"default\"], {\\n        icon: this.props.is_alignment_left ? \\'IcChevronLeft\\' : \\'IcChevronDown\\',\\n        className: external_classnames_default()(\\'dc-dropdown__select-arrow\\', {\\n          \\'dc-dropdown__select-arrow--left\\': this.props.is_alignment_left\\n        })\\n      }), this.props.error && external_react_default.a.createElement(\"p\", {\\n        className: \"dc-field-error\"\\n      }, this.props.error), external_react_default.a.createElement(external_react_transition_group_[\"CSSTransition\"], {\\n        \"in\": this.state.is_list_visible,\\n        timeout: 100,\\n        classNames: this.transition_class_names,\\n        onEntered: this.setListDimension,\\n        unmountOnExit: true\\n      }, external_react_default.a.createElement(\"div\", {\\n        className: this.dropdown_list_class_names\\n      }, external_react_default.a.createElement(\"div\", {\\n        className: this.list_class_names,\\n        ref: this.list_ref,\\n        style: getDropDownAlignment()\\n      }, external_react_default.a.createElement(themed_scrollbars[\"default\"], {\\n        autoHeight: true,\\n        autoHide: true,\\n        autoHeightMax: 200,\\n        renderTrackHorizontal: function renderTrackHorizontal(props) {\\n          return external_react_default.a.createElement(\"div\", _extends({}, props, {\\n            style: {\\n              display: \\'none\\'\\n            }\\n          }));\\n        },\\n        renderThumbHorizontal: function renderThumbHorizontal(props) {\\n          return external_react_default.a.createElement(\"div\", _extends({}, props, {\\n            style: {\\n              display: \\'none\\'\\n            }\\n          }));\\n        }\\n      }, Array.isArray(this.props.list) ? external_react_default.a.createElement(dropdown_items, {\\n        className: this.props.classNameItems,\\n        index: this.state.curr_index,\\n        handleSelect: this.handleSelect,\\n        has_symbol: this.props.has_symbol,\\n        items: this.props.list,\\n        name: this.props.name,\\n        is_align_text_left: this.props.is_align_text_left,\\n        value: this.props.value\\n      }) : Object.keys(this.props.list).map(function (key, idx) {\\n        return external_react_default.a.createElement(external_react_default.a.Fragment, {\\n          key: key\\n        }, external_react_default.a.createElement(\"div\", {\\n          className: external_classnames_default()(\\'dc-list__label\\', _this2.props.classNameLabel)\\n        }, key), external_react_default.a.createElement(dropdown_items, {\\n          className: _this2.props.classNameItems,\\n          handleSelect: _this2.handleSelect,\\n          has_symbol: _this2.props.has_symbol,\\n          items: _this2.props.list[key],\\n          name: _this2.props.name,\\n          is_align_text_left: _this2.props.is_align_text_left,\\n          value: _this2.props.value\\n        }), idx !== Object.keys(_this2.props.list).length - 1 && external_react_default.a.createElement(\"span\", {\\n          className: \"dc-list__separator\"\\n        }));\\n      })))))));\\n    }\\n  }, {\\n    key: \"computed_offset_left\",\\n\\n    /**\\n     * Calculate the offset for the dropdown list based on its width\\n     *\\n     * @return {{transform: string}}\\n     */\\n    get: function get() {\\n      return {\\n        transform: \"translate3d(calc(-\".concat(this.state.list_width, \"px - 12px), 0, 0px)\")\\n      };\\n    }\\n    /**\\n     * Calculate the offset for the dropdown list based on its height\\n     *\\n     * @return {{transform: string}}\\n     */\\n\\n  }, {\\n    key: \"computed_offset_top\",\\n    get: function get() {\\n      return {\\n        transform: \"translate3d(0, calc(-\".concat(this.state.list_height, \"px - 16px), 0px)\")\\n      };\\n    }\\n  }, {\\n    key: \"is_single_option\",\\n    get: function get() {\\n      return Array.isArray(this.props.list) ? this.props.list.length < 2 : // object has less than two props or inner object has less than two props\\n      Object.keys(this.props.list).length && Object.keys(this.props.list).length < 2 && this.props.list[Object.keys(this.props.list)[0]].length < 2;\\n    }\\n  }, {\\n    key: \"container_class_name\",\\n    get: function get() {\\n      return external_classnames_default()(\\'dc-dropdown-container\\', this.props.className, {\\n        \\'dc-dropdown--has-placeholder\\': this.props.placeholder,\\n        \\'dc-dropdown--left\\': this.props.is_alignment_left,\\n        \\'dc-dropdown--show\\': this.state.is_list_visible,\\n        \\'dc-dropdown--disabled\\': this.is_single_option || this.props.disabled\\n      });\\n    }\\n  }, {\\n    key: \"dropdown_display_class_name\",\\n    get: function get() {\\n      return external_classnames_default()(\\'dc-dropdown__display\\', this.props.classNameDisplay, {\\n        \\'dc-dropdown__display--clicked\\': this.state.is_list_visible,\\n        \\'dc-dropdown__display--has-symbol\\': this.props.has_symbol,\\n        \\'dc-dropdown__display--no-border\\': this.props.no_border,\\n        \\'dc-dropdown__display--is-left-text\\': this.props.is_align_text_left\\n      });\\n    }\\n  }, {\\n    key: \"dropdown_list_class_names\",\\n    get: function get() {\\n      return external_classnames_default()(\\'dc-dropdown__list\\', {\\n        \\'dc-dropdown__list--left\\': this.props.is_alignment_left,\\n        \\'dc-dropdown__list--top\\': this.props.is_alignment_top\\n      });\\n    }\\n  }, {\\n    key: \"list_class_names\",\\n    get: function get() {\\n      return external_classnames_default()(\\'dc-list\\', {\\n        \\'dc-list--left\\': this.props.is_alignment_left\\n      });\\n    }\\n  }, {\\n    key: \"transition_class_names\",\\n    get: function get() {\\n      return {\\n        enter: \"dc-dropdown__list--enter\".concat(this.props.is_alignment_left ? \\' dc-dropdown__list--left--enter\\' : \\'\\'),\\n        enterDone: \"dc-dropdown__list--enter-done\".concat(this.props.is_alignment_left ? \\' dc-dropdown__list--left--enter-done\\' : \\'\\'),\\n        exit: \"dc-dropdown__list--exit\".concat(this.props.is_alignment_left ? \\' dc-dropdown__list--left--exit\\' : \\'\\')\\n      };\\n    }\\n  }]);\\n\\n  return Dropdown;\\n}(external_react_default.a.Component);\\n\\ndropdown_Dropdown.propTypes = {\\n  className: external_prop_types_default.a.string,\\n  classNameDisplay: external_prop_types_default.a.string,\\n  classNameItems: external_prop_types_default.a.string,\\n  classNameLabel: external_prop_types_default.a.string,\\n  disabled: external_prop_types_default.a.bool,\\n  has_symbol: external_prop_types_default.a.bool,\\n  is_alignment_left: external_prop_types_default.a.bool,\\n  is_nativepicker: external_prop_types_default.a.bool,\\n  label: external_prop_types_default.a.string,\\n  list: dropdown_listPropType(),\\n  name: external_prop_types_default.a.string,\\n  no_border: external_prop_types_default.a.bool,\\n  onChange: external_prop_types_default.a.func,\\n  placeholder: external_prop_types_default.a.string,\\n  value: external_prop_types_default.a.oneOfType([external_prop_types_default.a.number, external_prop_types_default.a.string])\\n};\\n/* harmony default export */ var dropdown = (dropdown_Dropdown);\\n// EXTERNAL MODULE: ./src/components/dropdown/dropdown.scss\\nvar dropdown_dropdown = __webpack_require__(42);\\n\\n// EXTERNAL MODULE: ./src/components/dropdown/list.scss\\nvar dropdown_list = __webpack_require__(43);\\n\\n// CONCATENATED MODULE: ./src/components/dropdown/index.js\\n\\n\\n\\n/* harmony default export */ var components_dropdown = __webpack_exports__[\"default\"] = (dropdown);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///68\\n')}}).default});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../components/lib/dropdown.js\n");

/***/ })

}]);